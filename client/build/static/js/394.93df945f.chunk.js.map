{"version":3,"file":"static/js/394.93df945f.chunk.js","mappings":"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","sources":["webpack://client/./src/compenents/Button/Button.module.css?8b47","compenents/Button/Button.js","pages/Question/Editor/CodeEditorv3.js","webpack://client/./src/pages/Question/Question.module.css?e453","hooks/useAsync.js","hooks/useFetch.js","hooks/useLocalStorage.js","pages/Question/defaultCodes/defaultCodes.js","pages/Question/Question.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__bCOnh\",\"blue\":\"Button_blue__uFsUF\",\"green\":\"Button_green__rEjag\",\"yellow\":\"Button_yellow__fkuwo\"};","import React from 'react'\r\nimport classes from './Button.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Button = props => {\r\n    const handler = props.onClick ? props.onClick : () => { };\r\n    return (\r\n        <Link onClick={handler} to={props.to} className={`${classes.btn} ${classes[props.color]}`}>\r\n            <span>{props.children}</span>\r\n        </Link >\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\n\r\nimport AceEditor from 'react-ace'\r\n\r\nimport \"ace-builds/webpack-resolver\"\r\n\r\nimport 'ace-builds/src-noconflict/mode-javascript'\r\nimport 'ace-builds/src-noconflict/mode-c_cpp'\r\nimport 'ace-builds/src-noconflict/mode-java'\r\nimport 'ace-builds/src-noconflict/mode-python'\r\n\r\nimport 'ace-builds/src-noconflict/theme-monokai'\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\nconst CodeEditorv3 = props => {\r\n\r\n    const { code, setCode, language, fontSize, isReadOnly = false } = props;\r\n\r\n    let mode = 'c_cpp';\r\n    switch (language) {\r\n        case 'cpp':\r\n            mode = 'c_cpp';\r\n            break;\r\n        case 'java':\r\n            mode = 'java';\r\n            break;\r\n        case 'py':\r\n            mode = 'python';\r\n            break;\r\n        case 'js':\r\n            mode = 'javascript';\r\n            break;\r\n        default:\r\n            mode = 'c_cpp';\r\n    }\r\n\r\n    return (\r\n        <AceEditor\r\n            placeholder=\"Enter your code here\"\r\n            mode={mode}\r\n            theme=\"monokai\"\r\n            name=\"editorv3\"\r\n            onLoad={() => console.log('loaded')}\r\n            onChange={value => setCode(value)}\r\n            fontSize={parseInt(fontSize)}\r\n            showPrintMargin={false}\r\n            showGutter={true}\r\n            readOnly={isReadOnly}\r\n            highlightActiveLine={true}\r\n            value={code}\r\n            width='100%'\r\n            setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: false,\r\n                showLineNumbers: true,\r\n                tabSize: 4,\r\n            }}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default CodeEditorv3;","// extracted by mini-css-extract-plugin\nexport default {\"contain\":\"Question_contain__ru8ZR\",\"back\":\"Question_back__7ToYX\",\"backbtn\":\"Question_backbtn__McrNp\",\"head\":\"Question_head__vSsr6\",\"heading\":\"Question_heading__vFozC\",\"extraContent\":\"Question_extraContent__AOXKy\",\"level\":\"Question_level__ahdFX\",\"succ\":\"Question_succ__4rRkC\",\"subm\":\"Question_subm__Bngpp\",\"body\":\"Question_body__2pvp1\",\"desc\":\"Question_desc__q5tcb\",\"example\":\"Question_example__leq4o\",\"editor\":\"Question_editor__Hwp6K\",\"editorText\":\"Question_editorText__AKyPE\",\"submitBtn\":\"Question_submitBtn__5Zi8p\",\"notHead\":\"Question_notHead__SujD4\",\"spin\":\"Question_spin__6AOi9\",\"spinner\":\"Question_spinner__T1Fdi\",\"codeSnippet\":\"Question_codeSnippet__DTFr1\",\"changeFont\":\"Question_changeFont__PpJZI\",\"changeLang\":\"Question_changeLang__RstTV\",\"fontSnippet\":\"Question_fontSnippet__ppwIN\",\"optionSnippet\":\"Question_optionSnippet__X0lRO\",\"optionHeading\":\"Question_optionHeading__EAc9k\",\"resetCode\":\"Question_resetCode__SjDVM\",\"response\":\"Question_response__YRftG\"};","import { useCallback, useEffect, useState } from \"react\"\r\n\r\nexport default function useAsync(callback, dependencies = []) {\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState()\r\n  const [value, setValue] = useState()\r\n\r\n  const callbackMemoized = useCallback(() => {\r\n    setLoading(true)\r\n    setError(undefined)\r\n    setValue(undefined)\r\n    callback()\r\n      .then(setValue)\r\n      .catch(setError)\r\n      .finally(() => setLoading(false))\r\n  }, dependencies)\r\n\r\n  useEffect(() => {\r\n    callbackMemoized()\r\n  }, [callbackMemoized])\r\n\r\n  return { loading, error, value }\r\n}\r\n","import useAsync from \"./useAsync\"\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  headers: { \"Content-Type\": \"application/json\" },\r\n}\r\n\r\nexport default function useFetch(url, options = {}, dependencies = []) {\r\n  return useAsync(() => {\r\n    return fetch(url, { ...DEFAULT_OPTIONS, ...options }).then(res => {\r\n      if (res.ok) return res.json()\r\n      return res.json().then(json => Promise.reject(json))\r\n    })\r\n  }, dependencies)\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(key)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        return initialValue\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n\r\nexport default useLocalStorage;","export const defaultCppCode =\r\n    `#include <bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    cout << \"Hello World\" << endl;\r\n    return 0;\r\n}\r\n`;\r\n\r\nexport const defaultJsCode =\r\n    `console.log(\"Hello World\")\r\n`;\r\n\r\nexport const defaultPythonCode =\r\n    `print(\"Hello World\")\r\n`;","import React, { Fragment, useRef, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router';\r\n\r\nimport classes from './Question.module.css';\r\nimport useFetch from '../../hooks/useFetch';\r\nimport CodeEditorv3 from './Editor/CodeEditorv3';\r\nimport ButtonCustom from '../../compenents/Button/Button';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\r\n\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Settings from '@mui/icons-material/Settings'\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\n\r\nimport {\r\n    Fab,\r\n    Select,\r\n    Drawer,\r\n    Button,\r\n    MenuItem,\r\n    TextField,\r\n    InputLabel,\r\n    FormControl\r\n} from '@mui/material';\r\n\r\nimport { SERVER_LINK } from '../../dev-server-link';\r\nimport { defaultCppCode, defaultPythonCode } from './defaultCodes/defaultCodes';\r\n\r\nconst Question = () => {\r\n    const { id } = useParams();\r\n\r\n    const navigator = useNavigate();\r\n    const backBtnHandler = () => navigator(-1);\r\n\r\n    const { loading, error, value: question } = useFetch(\r\n        `${SERVER_LINK}/api/explore/problems/${id}`,\r\n        {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET',\r\n        },\r\n        [id]\r\n    )\r\n\r\n    // not-initialized, submitting, response-ok, response-not-ok, error\r\n    // not-initialized, submitting, submitted\r\n    const [codeSubmittingState, setcodeSubmittingState] = useState('not-initialized');\r\n\r\n    const [code, setCode] = useState(() => defaultCppCode);\r\n    const [codeFontSize, setcodeFontSize] = useState(15);\r\n    const [selectedLang, setSelectedLang] = useLocalStorage('selectedlangoj', 'cpp');\r\n    const [drawerOpen, toggleDrawerOpen] = useState(false);\r\n    const [response, setResponse] = useState([]);\r\n\r\n    const endRef = useRef(null);\r\n\r\n    const submitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        if (codeSubmittingState === 'submitting') return;\r\n\r\n        console.log('submitting code');\r\n        setcodeSubmittingState('submitting');\r\n\r\n        try {\r\n            const query = await fetch(\r\n                `${SERVER_LINK}/api/explore/problems/${id}`,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ code, language: selectedLang, testcase: question.testcase, quesName: question.name })\r\n                }\r\n            );\r\n            const queryData = await query.json();\r\n            setResponse(queryData);\r\n\r\n            if (query.ok) {\r\n                console.info(\"response-ok\", queryData);\r\n                const intervalID = setInterval(async () => {\r\n                    const response = await fetch(\r\n                        `${SERVER_LINK}/api/explore/status/${queryData.queryId}`,\r\n                        {\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            method: 'GET'\r\n                        }\r\n                    );\r\n                    const data = await response.json();\r\n                    if (!response.ok) {\r\n                        clearInterval(intervalID);\r\n                        setcodeSubmittingState('submitted');\r\n                        setResponse(data);\r\n                        console.log(\"response-not-ok \", data);\r\n                    }\r\n                    else if (data.status !== 'pending') {\r\n                        clearInterval(intervalID);\r\n                        setcodeSubmittingState('submitted');\r\n                        setResponse({ ...data.output, status: data.status });\r\n                        console.log(`status -> ${data.status}`, data);\r\n                    }\r\n                    else console.log('status -> pending', data);\r\n                }, 1000);\r\n            }\r\n            else {\r\n                console.error('response not ok ', queryData);\r\n                setcodeSubmittingState('submitted');\r\n            }\r\n\r\n            endRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        } catch (error) {\r\n            setResponse({ msg: 'caught errors while sending code to server for getting verdict', serverError: JSON.stringify(error) });\r\n            setcodeSubmittingState('submitted');\r\n        }\r\n    }\r\n\r\n    const resetCode = () => {\r\n        switch (selectedLang) {\r\n            case 'cpp':\r\n                setCode(defaultCppCode);\r\n                break;\r\n            case 'py':\r\n                setCode(defaultPythonCode);\r\n                break;\r\n            // case 'js':\r\n            //     setCode(defaultJsCode);\r\n            //     break;\r\n            // case 'java':\r\n            //     setCode(defaultJavaCode);\r\n            //     break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading && <LoadingSpinner />}\r\n            {!loading && error && (<div>\r\n                <div className='errorTemplate'>\r\n                    <div><span>Msg : </span>Wasn't able to connect to server check if your are not offline or server might not be working !</div>\r\n                    {error && <div><span>Error : </span>{JSON.stringify(error)}</div>}\r\n                </div>\r\n            </div>)}\r\n            {!loading && !error && (\r\n                <div className={classes.contain}>\r\n                    <div className={classes.back}>\r\n                        <div className={classes.codeSnippet}>\r\n                            &#60; go back to questions /&#62;\r\n                        </div>\r\n                        <ButtonCustom to='/' onClick={backBtnHandler} color='yellow'>\r\n                            <ArrowBackIcon style={{ marginRight: '0.3em', transform: 'translateX(-12px)', fontSize: '1.2em' }} />\r\n                            Back\r\n                        </ButtonCustom>\r\n                    </div>\r\n                    <div className={classes.head}>\r\n                        <div style={{ display: 'inline-block' }}>\r\n                            <div className={classes.heading}>{question.name}</div>\r\n                            <div className={classes.extraContent}>\r\n                                <div className={classes.level} diff-color={question.difficulty}>{question.difficulty}</div>\r\n                                <div className={classes.succ}>{question.noOfSuccess === 0 ? 0 : ((question.noOfSuccess / question.noOfSubm * 100).toFixed(2))}%<span> Success</span></div>\r\n                                <div className={classes.subm}>{question.noOfSubm} <span>Submissions</span></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.notHead}>\r\n                        <div className={classes.body}>\r\n                            <div className={classes.desc}>\r\n                                {question.description}\r\n                            </div>\r\n                        </div>\r\n                        {question.examples.map((example, index) => (\r\n                            <div key={index} className={classes.body}>\r\n                                <div className={classes.example} exn={index + 1}>\r\n                                    <div><span>Input : </span>{example.input}</div>\r\n                                    <div><span>Output : </span>{example.output}</div>\r\n                                    {example.explaination && <div><span>Explaination : </span>{example.explaination}</div>}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div className={classes.editor}>\r\n                            <div className={classes.codeSnippet}>\r\n                                &#60; write your code here in <span style={{ color: 'red', textTransform: 'uppercase' }}>{selectedLang}</span> /&#62;\r\n                            </div>\r\n\r\n\r\n                            <Fab style={{\r\n                                zIndex: '899',\r\n                                position: 'absolute',\r\n                                top: '-2rem',\r\n                                right: '18%'\r\n                            }} onClick={() => toggleDrawerOpen(prev => !prev)} color=\"secondary\" aria-label=\"add\">\r\n                                <div className={classes.optionSnippet}\r\n                                    style={{\r\n                                        top: '-1.5rem',\r\n                                        whiteSpace: 'nowrap',\r\n                                        textTransform: 'lowercase'\r\n                                    }}\r\n                                >\r\n                                    &#60; change lang, font size, ... /&#62;\r\n                                </div>\r\n                                <Settings />\r\n                            </Fab>\r\n                            <Drawer\r\n                                anchor='right'\r\n                                open={drawerOpen}\r\n                                onClose={() => toggleDrawerOpen(prev => !prev)}\r\n                            >\r\n                                <div style={{ width: '15rem', margin: '1rem' }}>\r\n                                    <h1 className={classes.optionHeading} >Options</h1>\r\n\r\n\r\n                                    <div className={classes.fontSnippet}>\r\n                                        &#60; Font Size /&#62;\r\n                                    </div>\r\n                                    <div className={classes.changeFont}>\r\n                                        <TextField\r\n                                            type={'number'}\r\n                                            value={codeFontSize}\r\n                                            onChange={e => { if (e.target.value > 50 || e.target.value < 2) return; setcodeFontSize(e.target.value); }}\r\n                                            // variant=\"filled\"\r\n                                            style={{ width: '100%' }}\r\n                                            variant='standard'\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className={classes.changeLang}>\r\n                                        <FormControl>\r\n                                            <InputLabel id=\"changeLang-select-label\">Language</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"changeLang-select-label\"\r\n                                                id=\"changeLang-select\"\r\n                                                value={selectedLang}\r\n                                                label=\"Language\"\r\n                                                style={{ width: '8em', height: '2.8em' }}\r\n                                                onChange={e => setSelectedLang(e.target.value)}\r\n                                            >\r\n                                                <MenuItem value={'cpp'}>CPP</MenuItem>\r\n                                                <MenuItem value={'py'}>PYTHON</MenuItem>\r\n                                                {/* <MenuItem value={'java'}>JAVA</MenuItem> */}\r\n                                                {/* <MenuItem value={'js'}>JS</MenuItem> */}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n\r\n                                    <div className={classes.resetCode}>\r\n                                        <Button color=\"error\" onClick={resetCode} variant='contained' startIcon={\r\n                                            <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\r\n                                        } style={{ textTransform: 'capitalize' }}>\r\n                                            ResetCode\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </Drawer>\r\n\r\n                            <div className={classes.editorText}>\r\n                                <CodeEditorv3\r\n                                    selectedLang={selectedLang}\r\n                                    code={code}\r\n                                    setCode={setCode}\r\n                                    language={selectedLang}\r\n                                    fontSize={codeFontSize}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.submitBtn}>\r\n                            <div className={classes.codeSnippet}>\r\n                                &#60;&#160;\r\n                                {codeSubmittingState === 'submitting' ?\r\n                                    'wait for response' : (codeSubmittingState === 'not-initialized' ?\r\n                                        'click here to submit' : 'wanna submit again')}\r\n                                &#160;/&#62;\r\n                            </div>\r\n                            <ButtonCustom to='/' onClick={submitHandler} color='green'>\r\n                                {codeSubmittingState === 'submitting' ? 'Submitting' : 'Submit'}\r\n                                {codeSubmittingState === 'submitting' ? <div className={classes.spin} /> : <SendIcon style={{ marginLeft: '0.6em', fontSize: '1.2em' }} />}\r\n                            </ButtonCustom>\r\n                        </div>\r\n                        {codeSubmittingState !== 'not-initialized' && (\r\n                            <div className={classes.body}>\r\n                                <div style={{ \"--col\": (response.status === 'success' ? 127 : 0) }} className={classes.response}>\r\n                                    {response.msg && <div><span>Msg : </span>{response.msg}</div>}\r\n                                    {response.stdout && <div><span>STDOUT : </span>{response.stdout}</div>}\r\n                                    {response.stderr && <div><span>STDERR : </span>{response.stderr}</div>}\r\n                                    {response.error && <div><span>Error : </span>{JSON.stringify(response.error)}</div>}\r\n                                    {response.serverError && <div><span>serverError : </span>{response.serverError.toString()}</div>}\r\n                                    {response.status === 'pending' && <div style={{ marginTop: '2rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}> <LoadingSpinner /> </div>}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div aria-hidden ref={endRef}></div>\r\n                </div>\r\n            )}\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Question;"],"names":["props","handler","onClick","to","className","classes","color","children","code","setCode","language","fontSize","isReadOnly","mode","placeholder","theme","name","onLoad","console","log","onChange","value","parseInt","showPrintMargin","showGutter","readOnly","highlightActiveLine","width","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useAsync","callback","dependencies","useState","loading","setLoading","error","setError","setValue","callbackMemoized","useCallback","undefined","then","catch","finally","useEffect","DEFAULT_OPTIONS","headers","key","initialValue","jsonValue","localStorage","getItem","JSON","parse","setItem","stringify","defaultCppCode","id","useParams","navigator","useNavigate","url","options","fetch","res","ok","json","Promise","reject","useFetch","SERVER_LINK","method","question","codeSubmittingState","setcodeSubmittingState","codeFontSize","setcodeFontSize","useLocalStorage","selectedLang","setSelectedLang","drawerOpen","toggleDrawerOpen","response","setResponse","endRef","useRef","submitHandler","event","preventDefault","body","testcase","quesName","query","queryData","info","intervalID","setInterval","queryId","data","status","clearInterval","output","current","scrollIntoView","behavior","block","msg","serverError","Fragment","LoadingSpinner","Button","ArrowBack","style","marginRight","transform","display","difficulty","noOfSuccess","noOfSubm","toFixed","description","examples","map","example","index","exn","input","explaination","textTransform","Fab","zIndex","position","top","right","prev","whiteSpace","Settings","Drawer","anchor","open","onClose","margin","TextField","type","e","target","variant","FormControl","InputLabel","Select","labelId","label","height","MenuItem","startIcon","RestartAlt","CodeEditorv3","Send","marginLeft","stdout","stderr","toString","marginTop","alignItems","justifyContent","ref"],"sourceRoot":""}