{"version":3,"file":"static/js/151.4c52b9fc.chunk.js","mappings":"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","sources":["webpack://client/./src/compenents/Button/Button.module.css?8b47","compenents/Button/Button.js","webpack://client/./src/pages/QuestionList/Card/Card.module.css?ba7b","pages/QuestionList/Card/Card.js","webpack://client/./src/pages/QuestionList/Filter/Filter.module.css?a393","pages/QuestionList/Filter/Filter.js","webpack://client/./src/pages/QuestionList/QuestionList.module.css?543f","pages/QuestionList/QuestionList.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__bCOnh\",\"skyblue\":\"Button_skyblue__rNZpw\",\"blue\":\"Button_blue__uFsUF\",\"grey\":\"Button_grey__-4fWo\",\"green\":\"Button_green__rEjag\",\"yellow\":\"Button_yellow__fkuwo\"};","import React from 'react'\r\nimport classes from './Button.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Button = props => {\r\n    const handler = props.onClick ? props.onClick : () => { };\r\n    return (\r\n        <Link onClick={handler} to={props.to} className={`${classes.btn} ${classes[props.color]}`}>\r\n            <span>{props.children}</span>\r\n        </Link >\r\n    )\r\n}\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"Card\":\"Card_Card__N7dyN\",\"questionName\":\"Card_questionName__ltImG\",\"mid\":\"Card_mid__-0FuP\",\"level\":\"Card_level__UKXYT\",\"left\":\"Card_left__frEVz\",\"right\":\"Card_right__t4Glb\"};","import React from 'react'\r\nimport classes from './Card.module.css'\r\nimport Button from '../../../compenents/Button/Button'\r\n\r\nimport CodeIcon from '@mui/icons-material/Code';\r\n\r\nconst Card = props => {\r\n    const { question, solved } = props;\r\n\r\n    return (\r\n        <div className={classes.Card}>\r\n            <div className={classes.left}>\r\n                <div className={classes.questionName}>\r\n                    {question.name}\r\n                </div>\r\n            </div>\r\n            <div className={classes.mid}>\r\n                <div className={classes.level} diff-color={question.difficulty}>{question.difficulty}</div>\r\n                <div className={classes.succ}>{question.noOfSuccess === 0 ? 0 : ((question.noOfSuccess / question.noOfSubm * 100).toFixed(2))}% Success</div>\r\n            </div>\r\n            <div className={classes.right}>\r\n                <Button to={`/questions/${question._id}`} color={solved ? 'grey' : 'blue'}>\r\n                    {solved ? \"Solved\" : \"Solve\"}\r\n                    <CodeIcon fontSize='large' style={{ marginLeft: '0.5em' }} />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"Filter_heading__q3z6P\",\"clearFilter\":\"Filter_clearFilter__EVLWa\",\"checkboxes\":\"Filter_checkboxes__lZo+m\"};","import React, { Fragment } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport {\r\n    Checkbox,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Button\r\n} from '@mui/material'\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport classes from './Filter.module.css'\r\nimport { messageActions } from '../../../store/Message/message-slice'\r\n\r\nconst Filter = props => {\r\n\r\n    const { easy,\r\n        medium,\r\n        hard,\r\n        setEasy,\r\n        setMedium,\r\n        setHard,\r\n        loggedIn,\r\n        solved,\r\n        setSolved,\r\n        unsolved,\r\n        setUnsolved\r\n    } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const easyChecked = () => setEasy(prev => !prev);\r\n    const mediumChecked = () => setMedium(prev => !prev);\r\n    const hardChecked = () => setHard(prev => !prev);\r\n\r\n    const clearFilter = () => {\r\n        if (!easy && !medium && !hard && !solved && !unsolved) return;\r\n        setEasy(false);\r\n        setMedium(false);\r\n        setHard(false);\r\n        setSolved(false);\r\n        setUnsolved(false);\r\n        dispatch(messageActions.set({\r\n            type: 'warning',\r\n            message: 'All Filters Cleared !'\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classes.heading}>Filter</div>\r\n\r\n            <div className={classes.clearFilter}>\r\n                <Button color=\"error\" onClick={clearFilter} variant=\"outlined\" endIcon={\r\n                    <DeleteIcon fontSize='large' style={{ fontSize: '2em' }} />\r\n                } style={{ fontFamily: 'PT Serif', fontWeight: '500', textTransform: 'capitalize' }}>\r\n                    <span style={{ fontSize: '1.1rem' }}>Clear-Filter</span>\r\n                </Button>\r\n            </div>\r\n\r\n            <div style={{ borderBottom: '1px solid rgba(34, 36, 38, 0.15)' }}>\r\n                <div className={classes.checkboxes}>\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={easyChecked}\r\n                                    checked={easy}\r\n                                    sx={{\r\n                                        color: 'hsl(120, 60%, 50%)',\r\n                                        '&.Mui-checked': {\r\n                                            color: 'hsl(120, 60%, 50%)',\r\n                                        }\r\n                                    }} />}\r\n                            label=\"Easy\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={mediumChecked}\r\n                                    checked={medium}\r\n                                    sx={{\r\n                                        color: 'hsl(240, 60%, 50%)',\r\n                                        '&.Mui-checked': {\r\n                                            color: 'hsl(240, 60%, 50%)',\r\n                                        }\r\n                                    }} />}\r\n                            label=\"Medium\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={hardChecked}\r\n                                    checked={hard}\r\n                                    sx={{\r\n                                        color: 'hsl(0, 60%, 50%)',\r\n                                        '&.Mui-checked': {\r\n                                            color: 'hsl(0, 60%, 50%)',\r\n                                        }\r\n                                    }} />}\r\n                            label=\"Hard\"\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n            </div>\r\n\r\n            {loggedIn &&\r\n                <div style={{ borderBottom: '1px solid rgba(34, 36, 38, 0.15)' }}>\r\n                    <div className={classes.checkboxes}>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        onChange={() => setSolved(prev => !prev)}\r\n                                        checked={solved}\r\n                                        sx={{\r\n                                            color: '#0288d1',\r\n                                            '&.Mui-checked': {\r\n                                                color: '#0288d1'\r\n                                            }\r\n                                        }}\r\n                                    />}\r\n                                label=\"Solved\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        onChange={() => setUnsolved(prev => !prev)}\r\n                                        checked={unsolved}\r\n                                        sx={{\r\n                                            color: '#0288d1',\r\n                                            '&.Mui-checked': {\r\n                                                color: '#0288d1'\r\n                                            }\r\n                                        }}\r\n                                    />}\r\n                                label=\"Unsolved\"\r\n                            />\r\n                        </FormGroup>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"questions\":\"QuestionList_questions__6ySWR\",\"filter\":\"QuestionList_filter__7vMbI\",\"filterabs\":\"QuestionList_filterabs__J0AAU\",\"cards\":\"QuestionList_cards__0ekXj\"};","import React, { useState, useEffect, Fragment, useRef } from 'react'\r\nimport Card from './Card/Card';\r\nimport Filter from './Filter/Filter';\r\nimport classes from './QuestionList.module.css'\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Fab from '@mui/material/Fab'\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { ClickAwayListener, Slide, useMediaQuery } from '@mui/material'\r\n\r\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\r\nimport ScrollToTop from '../../compenents/ScrollToTop/ScrollToTop';\r\n\r\n\r\nconst QuestionList = () => {\r\n\r\n    const [easy, setEasy] = useState(false);\r\n    const [medium, setMedium] = useState(false);\r\n    const [hard, setHard] = useState(false);\r\n    const [solved, setSolved] = useState(false);\r\n    const [unsolved, setUnsolved] = useState(false);\r\n    const cardsRef = useRef(null);\r\n\r\n    const { loggedIn, solvedQuestions } = useSelector(state => state.auth);\r\n    const problems = useSelector(state => state.questions);\r\n    const [questions, setQuestions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!easy && !medium && !hard) {\r\n            setQuestions(problems.questions);\r\n        }\r\n        else setQuestions(problems.questions.filter(element => (\r\n            (easy && element.difficulty === 'easy') ||\r\n            (medium && element.difficulty === 'medium') ||\r\n            (hard && element.difficulty === 'hard')\r\n        )));\r\n\r\n        if (solved || unsolved)\r\n            setQuestions(questions => questions.filter(ele => (\r\n                (solved && solvedQuestions.includes(ele._id)) ||\r\n                (unsolved && !solvedQuestions.includes(ele._id))\r\n            )));\r\n\r\n    }, [easy, medium, hard, problems, solved, unsolved, solvedQuestions])\r\n\r\n    const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n    const [isSideBar, setSideBar] = useState(false);\r\n\r\n    const handleFilterClickAway = () => {\r\n        setSideBar(false);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.questions}>\r\n            <ScrollToTop element={cardsRef.current} />\r\n            {\r\n                (problems.isLoading) ?\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                        width: '100%'\r\n                    }}\r\n                    >\r\n                        <LoadingSpinner />\r\n                    </div> : (\r\n                        (problems && problems.questions && problems.questions.length > 0) ? (\r\n                            <Fragment>\r\n                                {isMobile ? (\r\n                                    <ClickAwayListener onClickAway={handleFilterClickAway}>\r\n                                        <div>\r\n                                            <Fab\r\n                                                onClick={() => setSideBar(prev => !prev)}\r\n                                                style={{ position: 'fixed', marginLeft: '0.9rem', marginTop: '0.6rem', opacity: '0.8' }} color=\"secondary\"\r\n                                                aria-label=\"filter\"\r\n                                            >\r\n                                                {isSideBar ? <CloseIcon /> : <EditIcon />}\r\n                                            </Fab>\r\n                                            <Slide direction=\"right\" in={(isSideBar || !isMobile)} mountOnEnter unmountOnExit>\r\n                                                <div className={classes.filterabs}>\r\n                                                    <Filter\r\n                                                        setEasy={setEasy}\r\n                                                        setMedium={setMedium}\r\n                                                        setHard={setHard}\r\n                                                        easy={easy}\r\n                                                        medium={medium}\r\n                                                        hard={hard}\r\n                                                        loggedIn={loggedIn}\r\n                                                        solved={solved}\r\n                                                        setSolved={setSolved}\r\n                                                        unsolved={unsolved}\r\n                                                        setUnsolved={setUnsolved}\r\n                                                    />\r\n                                                </div>\r\n                                            </Slide>\r\n                                        </div>\r\n                                    </ClickAwayListener>\r\n                                ) : (\r\n                                    <div className={classes.filter}>\r\n                                        <div className={classes.filterabs}>\r\n                                            <Filter\r\n                                                setEasy={setEasy}\r\n                                                setMedium={setMedium}\r\n                                                setHard={setHard}\r\n                                                easy={easy}\r\n                                                medium={medium}\r\n                                                hard={hard}\r\n                                                loggedIn={loggedIn}\r\n                                                solved={solved}\r\n                                                setSolved={setSolved}\r\n                                                unsolved={unsolved}\r\n                                                setUnsolved={setUnsolved}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n\r\n                                <div className={classes.cards} ref={cardsRef}>\r\n                                    {questions.map(problem => <Card solved={loggedIn && solvedQuestions.includes(problem._id)} key={problem._id} question={problem} />)}\r\n                                </div>\r\n                            </Fragment>\r\n                        ) : (\r\n                            <div style={{ width: '100%' }}>\r\n                                <div className='errorTemplate'>\r\n                                    <div><span>Msg : </span>Looks like there are no questions here !</div>\r\n                                    {<div><span>Cause : </span>Check if your not offline / Or may be server is down.</div>}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionList;\r\n\r\n\r\n/*\r\n    {isMobile && (\r\n        <Fab\r\n            onClick={() => setSideBar(prev => !prev)}\r\n            style={{ position: 'fixed', marginLeft: '0.9rem', marginTop: '0.6rem', opacity: '0.8' }} color=\"secondary\"\r\n            aria-label=\"filter\"\r\n        >\r\n            {isSideBar ? <CloseIcon /> : <EditIcon />}\r\n        </Fab>\r\n    )}\r\n    {(isSideBar || !isMobile) && (\r\n        <div className={classes.filter}>\r\n            <div className={classes.filterabs}>\r\n                <Filter\r\n                    setEasy={setEasy}\r\n                    setMedium={setMedium}\r\n                    setHard={setHard}\r\n                    easy={easy}\r\n                    medium={medium}\r\n                    hard={hard}\r\n                />\r\n            </div>\r\n        </div>\r\n    )} \r\n*/"],"names":["props","handler","onClick","to","className","classes","color","children","question","solved","name","difficulty","noOfSuccess","noOfSubm","toFixed","Button","_id","Code","fontSize","style","marginLeft","easy","medium","hard","setEasy","setMedium","setHard","loggedIn","setSolved","unsolved","setUnsolved","dispatch","useDispatch","Fragment","messageActions","type","message","variant","endIcon","Delete","fontFamily","fontWeight","textTransform","borderBottom","FormGroup","FormControlLabel","control","Checkbox","onChange","prev","checked","sx","label","useState","cardsRef","useRef","useSelector","state","auth","solvedQuestions","problems","questions","setQuestions","useEffect","filter","element","ele","includes","isMobile","useMediaQuery","isSideBar","setSideBar","ScrollToTop","current","isLoading","display","justifyContent","alignItems","width","LoadingSpinner","length","ClickAwayListener","onClickAway","Fab","position","marginTop","opacity","Close","Edit","Slide","direction","in","mountOnEnter","unmountOnExit","ref","map","problem"],"sourceRoot":""}