{"version":3,"file":"static/js/290.6088718f.chunk.js","mappings":"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","sources":["webpack://client/./src/pages/LeaderBoard/LeaderTable/LeaderTable.module.css?d080","pages/LeaderBoard/LeaderTable/LeaderTable.js","pages/LeaderBoard/LeaderBoard.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"succRow\":\"LeaderTable_succRow__zAfqr\",\"errRow\":\"LeaderTable_errRow__ZZZHT\",\"headRow\":\"LeaderTable_headRow__WYNmH\",\"quesRow\":\"LeaderTable_quesRow__OaWWh\"};","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nimport {\r\n    Table,\r\n    Paper,\r\n    Button,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableContainer,\r\n    TablePagination,\r\n} from '@mui/material';\r\n\r\nimport moment from 'moment';\r\nimport classes from './LeaderTable.module.css'\r\nimport CodeIcon from '@mui/icons-material/Code';\r\n\r\nconst columns = [\r\n    {\r\n        id: 'quesName',\r\n        label: 'Question Name',\r\n        align: 'center',\r\n    },\r\n    {\r\n        id: 'status',\r\n        label: 'Status',\r\n        align: 'center'\r\n    },\r\n    {\r\n        id: 'msg',\r\n        label: 'Message',\r\n        align: 'center'\r\n    },\r\n    {\r\n        id: 'time',\r\n        label: 'Total Time(s)',\r\n        align: 'center',\r\n        format: (value) => value.toFixed(2),\r\n    },\r\n    {\r\n        id: 'language',\r\n        label: 'Language',\r\n        align: 'center',\r\n    },\r\n    {\r\n        id: 'submitTime',\r\n        label: 'Submit Time',\r\n        align: 'center',\r\n    },\r\n    {\r\n        id: 'code',\r\n        label: 'Code',\r\n        align: 'center'\r\n    }\r\n];\r\n\r\nconst createData = leaders => {\r\n    let { quesName, status, language, submitTime, completeTime, startTime, quesId, output, filepath } = leaders;\r\n\r\n    // if some of data is missing then fix them with some default values\r\n    (quesName === undefined || quesName === null) && (quesName = 'Binary Search');\r\n    (quesId === undefined || quesId === null) && (quesId = '62d2def98f76467879c21e29');\r\n\r\n    const time = Math.abs(new Date(completeTime) - new Date(startTime)) / 1000;\r\n    submitTime = moment(submitTime).fromNow();\r\n    status === 'pending' ? (status = 'Pending') : (status === 'success' ? (status = 'Accepted') : (status = 'Rejected'));\r\n\r\n    return { quesName, status, language, time, submitTime, quesId, msg: ((!output || !output.msg) ? 'NA' : output.msg), filepath };\r\n}\r\n\r\nconst LeaderTable = props => {\r\n    const { leaders } = props;\r\n    const NavigateFunction = useNavigate();\r\n\r\n    const rows = leaders.map(createData);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n            <TableContainer sx={{ maxHeight: '80vh' }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth, backgroundColor: 'rgb(38, 45, 51)', color: 'rgba(240,240,240, 0.9)' }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((row, index) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        tabIndex={-1}\r\n                                        key={index}\r\n                                        className={classes[(row.status === 'Accepted' ? 'succRow' : (row.status === 'Rejected' ? 'errRow' : ''))]}\r\n                                    >\r\n                                        {columns.map(column => {\r\n                                            const value = row[column.id];\r\n                                            return (\r\n                                                <TableCell\r\n                                                    key={column.id}\r\n                                                    align={column.align}\r\n                                                    role={column.id === 'quesName' ? 'link' : 'cell'}\r\n                                                    onClick={column.id === 'quesName' ? () => NavigateFunction(`/questions/${row.quesId}`) : null}\r\n                                                    className={classes[(column.id === 'quesName' ? 'quesRow' : '')]}\r\n                                                >\r\n                                                    {column.id === 'code' ? (\r\n                                                        <Button variant=\"contained\" onClick={() => NavigateFunction(`/codes/${row.quesId}`, { state: { filepath: row.filepath, language: row.language } })}>\r\n                                                            <CodeIcon />\r\n                                                        </Button>\r\n                                                    ) : (\r\n                                                        column.format\r\n                                                            ? column.format(value)\r\n                                                            : value\r\n                                                    )}\r\n                                                </TableCell>\r\n                                            );\r\n                                        })}\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 30, 50, 80, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </Paper >\r\n    );\r\n}\r\n\r\nexport default LeaderTable;","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { SERVER_LINK } from '../../dev-server-link';\r\n\r\nimport LeaderTable from './LeaderTable/LeaderTable';\r\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\r\n\r\nconst LeaderBoard = () => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(undefined);\r\n    const [leaders, setLeaders] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        fetch(\r\n            `${SERVER_LINK}/api/explore/leaderboard`,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                method: 'GET'\r\n            }\r\n        )\r\n            .then(data => data.json())\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    setLeaders(response);\r\n                }\r\n            })\r\n            .catch(setError)\r\n            .finally(() => setLoading(false))\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading && <LoadingSpinner />}\r\n            {!loading && error && (<div>\r\n                <div className='errorTemplate'>\r\n                    <div><span>Msg : </span>Wasn't able to connect to server check if your are not offline or server might not be working !</div>\r\n                    {error && <div><span>Error : </span>{JSON.stringify(error)}</div>}\r\n                </div>\r\n            </div>)}\r\n            {!loading && !error && (\r\n                <LeaderTable leaders={[...leaders]} />\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default LeaderBoard;"],"names":["columns","id","label","align","format","value","toFixed","createData","leaders","quesName","status","language","submitTime","completeTime","startTime","quesId","output","filepath","undefined","time","Math","abs","Date","moment","fromNow","msg","props","NavigateFunction","useNavigate","rows","map","useState","page","setPage","rowsPerPage","setRowsPerPage","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","column","TableCell","style","minWidth","backgroundColor","color","TableBody","slice","row","index","hover","role","tabIndex","className","classes","onClick","Button","variant","state","Code","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","loading","setLoading","error","setError","setLeaders","useEffect","fetch","SERVER_LINK","headers","method","then","data","json","response","ok","catch","finally","Fragment","LoadingSpinner","JSON","stringify"],"sourceRoot":""}