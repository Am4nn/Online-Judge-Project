{"version":3,"file":"static/js/141.237d7b64.chunk.js","mappings":"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","sources":["webpack://client/./src/compenents/Button/Button.module.css?8b47","compenents/Button/Button.js","pages/Question/Editor/CodeEditorv3.js","compenents/InputSlider/InputSlider.js","webpack://client/./src/pages/Question/Options/Options.module.css?dacc","pages/Question/Options/Options.js","webpack://client/./src/pages/Question/Question.module.css?e453","hooks/useLocalStorage.js","pages/Question/defaultCodes/defaultCodes.js","pages/Question/correctCodes/index.js","pages/Question/correctCodes/bs0.js","pages/Question/Question.js","../node_modules/@mui/icons-material/ArrowBack.js","../node_modules/@mui/icons-material/Send.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__bCOnh\",\"skyblue\":\"Button_skyblue__rNZpw\",\"blue\":\"Button_blue__uFsUF\",\"grey\":\"Button_grey__-4fWo\",\"green\":\"Button_green__rEjag\",\"yellow\":\"Button_yellow__fkuwo\"};","import React from 'react'\r\nimport classes from './Button.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Button = props => {\r\n    const handler = props.onClick ? props.onClick : () => { };\r\n    return (\r\n        <Link onClick={handler} to={props.to} className={`${classes.btn} ${classes[props.color]}`}>\r\n            <span>{props.children}</span>\r\n        </Link >\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { Fragment } from 'react'\r\n\r\nimport AceEditor from 'react-ace'\r\n\r\nimport \"ace-builds/webpack-resolver\"\r\n\r\nimport 'ace-builds/src-noconflict/mode-javascript'\r\nimport 'ace-builds/src-noconflict/mode-c_cpp'\r\nimport 'ace-builds/src-noconflict/mode-java'\r\nimport 'ace-builds/src-noconflict/mode-python'\r\n\r\nimport 'ace-builds/src-noconflict/theme-monokai'\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\nconst CodeEditorv3 = props => {\r\n\r\n    const { code, setCode, language, fontSize, isReadOnly = false, isLoading = false } = props;\r\n\r\n    let mode = 'c_cpp';\r\n    switch (language) {\r\n        case 'c':\r\n            mode = 'c_cpp';\r\n            break;\r\n        case 'cpp':\r\n            mode = 'c_cpp';\r\n            break;\r\n        case 'java':\r\n            mode = 'java';\r\n            break;\r\n        case 'py':\r\n            mode = 'python';\r\n            break;\r\n        case 'js':\r\n            mode = 'javascript';\r\n            break;\r\n        default:\r\n            mode = 'c_cpp';\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {isLoading && <div style={{ position: 'absolute', zIndex: 10, display: 'flex', alignItems: 'center', pointerEvents: 'none', translate: '0 1rem' }}>\r\n                <div className='spin' />\r\n                <span style={{ fontSize: '1.8rem', color: 'rgba(128, 128, 128, 0.8)', fontWeight: 500, marginLeft: '1rem' }}>Loading Code...</span>\r\n            </div>}\r\n            <AceEditor\r\n                placeholder=\"Enter your code here\"\r\n                mode={mode}\r\n                theme=\"monokai\"\r\n                name=\"editorv3\"\r\n                onLoad={() => {\r\n                    // console.log('loaded')\r\n                }}\r\n                onChange={value => setCode(value)}\r\n                fontSize={parseInt(fontSize)}\r\n                showPrintMargin={false}\r\n                showGutter={true}\r\n                readOnly={isReadOnly}\r\n                highlightActiveLine={true}\r\n                value={code}\r\n                width='100%'\r\n                setOptions={{\r\n                    enableBasicAutocompletion: true,\r\n                    enableLiveAutocompletion: true,\r\n                    enableSnippets: false,\r\n                    showLineNumbers: true,\r\n                    tabSize: 4,\r\n                }}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CodeEditorv3;","import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Slider from '@mui/material/Slider';\r\nimport MuiInput from '@mui/material/Input';\r\n\r\nimport TextFields from '@mui/icons-material/TextFields';\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSlider = ({ codeFontSize: value, setcodeFontSize: setValue }) => {\r\n\r\n    const maxVal = 50, minVal = 5;\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (value < minVal) {\r\n            setValue(minVal);\r\n        } else if (value > maxVal) {\r\n            setValue(maxVal);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ width: 250, marginRight: '1rem' }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item>\r\n                    <TextFields />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={handleSliderChange}\r\n                        aria-labelledby=\"input-slider\"\r\n                        min={minVal}\r\n                        max={maxVal}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Input\r\n                        value={value}\r\n                        size=\"small\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleBlur}\r\n                        inputProps={{\r\n                            step: 10,\r\n                            min: minVal,\r\n                            max: maxVal,\r\n                            type: 'number',\r\n                            'aria-labelledby': 'input-slider',\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default InputSlider;","// extracted by mini-css-extract-plugin\nexport default {\"optionHeading\":\"Options_optionHeading__fdusp\",\"optionSnippet\":\"Options_optionSnippet__N0l+l\",\"fontSnippet\":\"Options_fontSnippet__fL-Vn\",\"changeFont\":\"Options_changeFont__gkV59\",\"resetCode\":\"Options_resetCode__dGw-D\"};","import Settings from '@mui/icons-material/Settings'\r\nimport { Button, Drawer, Fab, FormControl, InputLabel, MenuItem, Select } from '@mui/material'\r\nimport React, { Fragment, useState } from 'react'\r\nimport InputSlider from '../../../compenents/InputSlider/InputSlider'\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\n\r\nimport classes from './Options.module.css';\r\n\r\nconst Options = props => {\r\n\r\n    const {\r\n        favStyle,\r\n        resetCode,\r\n        showCorrectCode,\r\n        codeFontSize,\r\n        selectedLang,\r\n        codeEditable,\r\n        setcodeFontSize,\r\n        setSelectedLang,\r\n        correctCodeAvailable\r\n    } = props;\r\n\r\n    const [drawerOpen, toggleDrawerOpen] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Fab style={favStyle} onClick={() => toggleDrawerOpen(prev => !prev)} color=\"secondary\" aria-label=\"add\">\r\n                <div className={classes.optionSnippet}\r\n                    style={{\r\n                        top: '-1.5rem',\r\n                        whiteSpace: 'nowrap',\r\n                        textTransform: 'lowercase'\r\n                    }}\r\n                >\r\n                    &#60; change lang, font size, ... /&#62;\r\n                </div>\r\n                <Settings />\r\n            </Fab>\r\n            <Drawer\r\n                anchor='right'\r\n                open={drawerOpen}\r\n                onClose={() => toggleDrawerOpen(false)}\r\n            >\r\n                <div style={{ width: '15rem', margin: '1rem' }}>\r\n                    <h1 className={classes.optionHeading} >Options</h1>\r\n\r\n\r\n                    <div className={classes.fontSnippet}>\r\n                        &#60; Font Size /&#62;\r\n                    </div>\r\n                    <div className={classes.changeFont}>\r\n                        <InputSlider codeFontSize={codeFontSize} setcodeFontSize={setcodeFontSize} />\r\n                    </div>\r\n                    {codeEditable &&\r\n                        <Fragment>\r\n                            <div className={classes.changeLang}>\r\n                                <FormControl>\r\n                                    <InputLabel id=\"changeLang-select-label\">Language</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"changeLang-select-label\"\r\n                                        id=\"changeLang-select\"\r\n                                        value={selectedLang}\r\n                                        label=\"Language\"\r\n                                        style={{ width: '8em', height: '2.8em' }}\r\n                                        onChange={e => setSelectedLang(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={'c'}>C</MenuItem>\r\n                                        <MenuItem value={'cpp'}>Cpp</MenuItem>\r\n                                        <MenuItem value={'py'}>Python</MenuItem>\r\n                                        <MenuItem value={'java'}>Java</MenuItem>\r\n                                        <MenuItem value={'js'}>Js</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n\r\n                            <div className={classes.resetCode}>\r\n                                <Button color=\"error\" onClick={() => { resetCode(); toggleDrawerOpen(false); }} variant='contained' startIcon={\r\n                                    <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\r\n                                } style={{ textTransform: 'capitalize' }}>\r\n                                    ResetCode\r\n                                </Button>\r\n                            </div>\r\n                            {correctCodeAvailable &&\r\n                                <Button color=\"info\" onClick={() => { showCorrectCode(); toggleDrawerOpen(false); }} variant='contained' startIcon={\r\n                                    <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\r\n                                } style={{ textTransform: 'capitalize' }}>\r\n                                    ShowCorrectCode.<span style={{ textTransform: 'lowercase' }}>{selectedLang}</span>\r\n                                </Button>\r\n                            }\r\n                        </Fragment>\r\n                    }\r\n                </div>\r\n            </Drawer>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Options","// extracted by mini-css-extract-plugin\nexport default {\"contain\":\"Question_contain__ru8ZR\",\"back\":\"Question_back__7ToYX\",\"backbtn\":\"Question_backbtn__McrNp\",\"head\":\"Question_head__vSsr6\",\"heading\":\"Question_heading__vFozC\",\"extraContent\":\"Question_extraContent__AOXKy\",\"level\":\"Question_level__ahdFX\",\"succ\":\"Question_succ__4rRkC\",\"subm\":\"Question_subm__Bngpp\",\"body\":\"Question_body__2pvp1\",\"desc\":\"Question_desc__q5tcb\",\"example\":\"Question_example__leq4o\",\"editor\":\"Question_editor__Hwp6K\",\"editorText\":\"Question_editorText__AKyPE\",\"submitBtn\":\"Question_submitBtn__5Zi8p\",\"notHead\":\"Question_notHead__SujD4\",\"spin\":\"Question_spin__6AOi9\",\"spinner\":\"Question_spinner__T1Fdi\",\"codeSnippet\":\"Question_codeSnippet__DTFr1\",\"response\":\"Question_response__YRftG\",\"resHead\":\"Question_resHead__J28zB\",\"resTextHead\":\"Question_resTextHead__pk2H-\"};","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(key)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        return initialValue\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n\r\nexport default useLocalStorage;","const defaultCppCode =\r\n    `#include <bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    cout << \"Hello World\" << endl;\r\n    return 0;\r\n}\r\n`;\r\n\r\nconst defaultCCode =\r\n    `#include <stdio.h>\r\nint main()\r\n{\r\n    printf(\"Hello World\\\\n\");\r\n    return 0;\r\n}\r\n`;\r\n\r\nconst defaultJsCode =\r\n    `console.log(\"Hello World\")\r\n`;\r\n\r\nconst defaultPythonCode =\r\n    `print(\"Hello World\")\r\n`;\r\n\r\nconst defaultJavaCode =\r\n    `// Don't make any public class,\r\n// use this Solution class because its main() function\r\n// will be called while compilation and execuation.\r\n// There must be Solution class in your java code !\r\n\r\nclass Solution {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello From Java\");\r\n    }\r\n}\r\n`;\r\n\r\nconst defaultCodes = {\r\n    c: defaultCCode,\r\n    cpp: defaultCppCode,\r\n    py: defaultPythonCode,\r\n    js: defaultJsCode,\r\n    java: defaultJavaCode,\r\n};\r\n\r\nexport default defaultCodes;\r\n","import bs0 from \"./bs0\";\r\n\r\n\r\nexport const correctCode = {\r\n    bs0\r\n}","const c = `#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint predicate(int x, int k)\r\n{\r\n    if (x > k)\r\n        return 1;\r\n    return 0;\r\n}\r\n\r\nint binarySearch(int arr[], int n, int k)\r\n{\r\n    // edge case\r\n    if (k < arr[0] || k > arr[n - 1])\r\n        return -1;\r\n\r\n    int l = 0, r = n - 1, m;\r\n    while (l < r - 1)\r\n    {\r\n        m = l + (r - l) / 2; // to avoid overflow\r\n        if (predicate(arr[m], k) == 0)\r\n            l = m;\r\n        else\r\n            r = m;\r\n    }\r\n    if (arr[l] == k)\r\n        return l;\r\n    // edge case: when ans is last element\r\n    if (arr[r] == k)\r\n        return r;\r\n    return -1;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, k;\r\n    scanf(\"%d\", &n);\r\n    int *arr = (int *)calloc(n, sizeof(int));\r\n    for (int i = 0; i < n; ++i)\r\n        scanf(\"%d\", &arr[i]);\r\n    scanf(\"%d\", &k);\r\n    printf(\"%d\", binarySearch(arr, n, k));\r\n    free(arr);\r\n    return 0;\r\n}\r\n`;\r\n\r\nconst cpp = `#include <bits/stdc++.h>\r\n#define endl '\\\\n'\r\nusing namespace std;\r\n\r\nint predicate(int x, int k)\r\n{\r\n    if (x > k)\r\n        return 1;\r\n    return 0;\r\n}\r\n\r\nint binarySearch(vector<int> arr, int n, int k)\r\n{\r\n    // edge case\r\n    if (k < arr[0] || k > arr[n - 1])\r\n        return -1;\r\n\r\n    int l = 0, r = n - 1, m;\r\n    while (l < r - 1)\r\n    {\r\n        m = l + (r - l) / 2; // to avoid overflow\r\n        if (predicate(arr[m], k) == 0)\r\n            l = m;\r\n        else\r\n            r = m;\r\n    }\r\n    if (arr[l] == k)\r\n        return l;\r\n    // edge case: when ans is last element\r\n    if (arr[r] == k)\r\n        return r;\r\n    return -1;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, k;\r\n    cin >> n;\r\n    vector<int> arr(n);\r\n    for (size_t i = 0; i < n; i++)\r\n        cin >> arr[i];\r\n    cin >> k;\r\n    cout << binarySearch(arr, n, k);\r\n    return 0;\r\n}\r\n`;\r\n\r\nconst java = `// Don't make any public class,\r\n// use this Solution class because its main() function\r\n// will be called while compilation and execuation.\r\n// There must be Solution class in your java code !\r\n\r\nimport java.util.Scanner;\r\n\r\nclass Solution {\r\n    public static int binarySearch(int[] arr, int first, int last, int key) {\r\n        int mid = (first + last) / 2;\r\n        while (first <= last) {\r\n            if (arr[mid] < key) {\r\n                first = mid + 1;\r\n            } else if (arr[mid] == key) {\r\n                return mid;\r\n            } else {\r\n                last = mid - 1;\r\n            }\r\n            mid = (first + last) / 2;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int n = sc.nextInt();\r\n        int[] arr = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            arr[i] = sc.nextInt();\r\n        }\r\n        int k = sc.nextInt();\r\n        sc.close();\r\n        int ans = binarySearch(arr, 0, n - 1, k);\r\n        System.out.println(ans);\r\n    }\r\n}\r\n`;\r\n\r\nconst py = `def binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n\r\n    while low <= high:\r\n\r\n        mid = (high + low) // 2\r\n\r\n        if arr[mid] < x:\r\n            low = mid + 1\r\n\r\n        elif arr[mid] > x:\r\n            high = mid - 1\r\n\r\n        else:\r\n            return mid\r\n\r\n    return -1\r\n\r\n\r\narr = []\r\nn = int(input())\r\n\r\nfor i in range(0, n):\r\n    ele = int(input())\r\n    arr.append(ele)\r\n\r\nx = int(input())\r\n\r\nresult = binary_search(arr, x)\r\nprint(result)\r\n`;\r\n\r\nconst js = `// ##############################################################################\r\n'use strict';\r\n\r\nprocess.stdin.resume();\r\nprocess.stdin.setEncoding('utf-8');\r\n\r\nlet inputString = '';\r\nlet currentLine = 0;\r\n\r\nprocess.stdin.on('data', inputStdin => {\r\n    inputString += inputStdin;\r\n});\r\n\r\nprocess.stdin.on('end', _ => {\r\n    inputString = inputString.trim().split('\\\\n').map(string => {\r\n        return string.trim();\r\n    });\r\n\r\n    main();\r\n});\r\n\r\n// this function will help in taking input\r\nfunction readline() {\r\n    return inputString[currentLine++];\r\n}\r\n// ##############################################################################\r\n// Make a Snippet for the code above this and then write your logic in main();\r\n\r\nfunction main() {\r\n    // remember in our platform for a test case a input is given as a single line\r\n    // hence readline() will give whole input in a space seperated string\r\n    /** @type {Array} - num is an array of integers */\r\n    const num = readline().split(\" \").map(int => parseInt(int));\r\n    let currentInt = 0;\r\n    const getNextInt = () => num[currentInt++];\r\n\r\n    const n = getNextInt();\r\n    const arr = [];\r\n    for (let i = 0; i < n; i++) {\r\n        arr.push(getNextInt());\r\n    }\r\n    const k = getNextInt();\r\n    const ans = binarySearch(arr, 0, n - 1, k);\r\n    console.log(ans);\r\n}\r\n\r\nfunction binarySearch(arr, first, last, key) {\r\n    let mid = Math.floor((first + last) / 2);\r\n    while (first <= last) {\r\n        if (arr[mid] < key) {\r\n            first = mid + 1;\r\n        } else if (arr[mid] == key) {\r\n            return mid;\r\n        } else {\r\n            last = mid - 1;\r\n        }\r\n        mid = Math.floor((first + last) / 2);\r\n    }\r\n    return -1;\r\n}\r\n`;\r\n\r\nconst bs0 = { c, cpp, java, py, js };\r\nexport default bs0;\r\n","import React, { Fragment, useRef, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport classes from './Question.module.css';\r\nimport CodeEditorv3 from './Editor/CodeEditorv3';\r\nimport ButtonCustom from '../../compenents/Button/Button';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport LoadingSpinner from '../../compenents/LoadingSpinner/LoadingSpinner';\r\n\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nimport Options from './Options/Options';\r\nimport defaultCodes from './defaultCodes/defaultCodes';\r\nimport { SERVER_LINK } from '../../dev-server-link';\r\nimport { correctCode } from './correctCodes/index';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Question = () => {\r\n\r\n    useScrollToTop();\r\n\r\n    const { id } = useParams();\r\n\r\n    const { loading, error, question } = useFetchProblems(id);\r\n\r\n    // not-initialized, submitting, submitted\r\n    const [codeSubmittingState, setcodeSubmittingState] = useState('not-initialized');\r\n\r\n    const [codeFontSize, setcodeFontSize] = useState(15);\r\n    const [selectedLang, setSelectedLang] = useLocalStorage('selectedlangoj', 'cpp');\r\n    const [code, setCode] = useState(defaultCodes[selectedLang]);\r\n    const [response, setResponse] = useState([]);\r\n\r\n    const endRef = useRef(null);\r\n\r\n    const submitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        if (codeSubmittingState === 'submitting') return;\r\n\r\n        console.log('submitting code');\r\n        setcodeSubmittingState('submitting');\r\n\r\n        try {\r\n            const query = await fetch(\r\n                `${SERVER_LINK}/api/explore/problems/${id}`,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    method: 'POST',\r\n                    credentials: 'include',\r\n                    body: JSON.stringify({ code, language: selectedLang, testcase: question.testcase, quesName: question.name })\r\n                }\r\n            );\r\n            const queryData = await query.json();\r\n            setResponse(queryData);\r\n\r\n            if (query.ok) {\r\n                const intervalID = setInterval(async () => {\r\n                    const response = await fetch(\r\n                        `${SERVER_LINK}/api/explore/status/${queryData.queryId}`,\r\n                        {\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            },\r\n                            method: 'GET'\r\n                        }\r\n                    );\r\n                    const data = await response.json();\r\n                    if (!response.ok) {\r\n                        clearInterval(intervalID);\r\n                        setcodeSubmittingState('submitted');\r\n                        setResponse(data);\r\n                    }\r\n                    else if (data.status !== 'pending') {\r\n                        clearInterval(intervalID);\r\n                        setcodeSubmittingState('submitted');\r\n                        setResponse({ ...data.output, status: data.status });\r\n                    }\r\n                    // else console.log('status -> pending', data);\r\n                }, 1000);\r\n            }\r\n            else {\r\n                setcodeSubmittingState('submitted');\r\n            }\r\n\r\n            endRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        } catch (error) {\r\n            setResponse({ msg: 'caught errors while sending code to server for getting verdict', serverError: JSON.stringify(error) });\r\n            setcodeSubmittingState('submitted');\r\n        }\r\n    }\r\n\r\n    const resetCode = () => {\r\n        setCode(defaultCodes[selectedLang]);\r\n    }\r\n    const showCorrectCode = () => {\r\n        setCode(correctCode[question.testcase][selectedLang]);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {loading && <LoadingSpinner />}\r\n            {!loading && error && (<div>\r\n                <div className='errorTemplate'>\r\n                    <div><span>Msg : </span>Wasn't able to connect to server check if your are not offline or server might not be working !</div>\r\n                    {error && <div><span>Error : </span>{JSON.stringify(error)}</div>}\r\n                </div>\r\n            </div>)}\r\n            {!loading && !error && (\r\n                <div className={classes.contain}>\r\n                    <div className={classes.back}>\r\n                        <div className={classes.codeSnippet}>\r\n                            &#60; go back to questions /&#62;\r\n                        </div>\r\n                        <ButtonCustom to='/questions' color='yellow'>\r\n                            <ArrowBackIcon style={{ marginRight: '0.3em', transform: 'translateX(-12px)', fontSize: '1.2em' }} />\r\n                            Back\r\n                        </ButtonCustom>\r\n                    </div>\r\n                    <div className={classes.head}>\r\n                        <div style={{ display: 'inline-block' }}>\r\n                            <div className={classes.heading}>{question.name}</div>\r\n                            <div className={classes.extraContent}>\r\n                                <div className={classes.level} diff-color={question.difficulty}>{question.difficulty}</div>\r\n                                <div className={classes.succ}>{question.noOfSuccess === 0 ? 0 : ((question.noOfSuccess / question.noOfSubm * 100).toFixed(2))}%<span> Success</span></div>\r\n                                <div className={classes.subm}>{question.noOfSubm} <span>Submissions</span></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.notHead}>\r\n                        <div className={classes.body}>\r\n                            <div className={classes.desc}>\r\n                                {question.description}\r\n                            </div>\r\n                        </div>\r\n                        {question.examples.map((example, index) => (\r\n                            <div key={index} className={classes.body}>\r\n                                <div className={classes.example} exn={index + 1}>\r\n                                    <div><span>Input : </span>{example.input}</div>\r\n                                    <div><span>Output : </span>{example.output}</div>\r\n                                    {example.explaination && <div><span>Explaination : </span>{example.explaination}</div>}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div className={classes.editor}>\r\n                            <div className={classes.codeSnippet}>\r\n                                &#60; write your code here in <span style={{ color: 'red', textTransform: 'uppercase' }}>{selectedLang}</span> /&#62;\r\n                            </div>\r\n\r\n                            <Options\r\n                                favStyle={{\r\n                                    zIndex: '899',\r\n                                    position: 'absolute',\r\n                                    top: '-2rem',\r\n                                    right: '18%'\r\n                                }}\r\n                                resetCode={resetCode}\r\n                                selectedLang={selectedLang}\r\n                                codeFontSize={codeFontSize}\r\n                                setSelectedLang={setSelectedLang}\r\n                                setcodeFontSize={setcodeFontSize}\r\n                                showCorrectCode={showCorrectCode}\r\n                                codeEditable\r\n                                correctCodeAvailable={!!correctCode[question.testcase]}\r\n                            />\r\n\r\n                            <div className={classes.editorText}>\r\n                                <CodeEditorv3\r\n                                    selectedLang={selectedLang}\r\n                                    code={code}\r\n                                    setCode={setCode}\r\n                                    language={selectedLang}\r\n                                    fontSize={codeFontSize}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.submitBtn}>\r\n                            <div className={classes.codeSnippet}>\r\n                                &#60;&#160;\r\n                                {codeSubmittingState === 'submitting' ?\r\n                                    'wait for response' : (codeSubmittingState === 'not-initialized' ?\r\n                                        'click here to submit' : 'wanna submit again')}\r\n                                &#160;/&#62;\r\n                            </div>\r\n                            <ButtonCustom to='/' onClick={submitHandler} color='green'>\r\n                                {codeSubmittingState === 'submitting' ? 'Submitting' : 'Submit'}\r\n                                {codeSubmittingState === 'submitting' ? <div className={classes.spin} /> : <SendIcon style={{ marginLeft: '0.6em', fontSize: '1.2em' }} />}\r\n                            </ButtonCustom>\r\n                        </div>\r\n                        {codeSubmittingState !== 'not-initialized' && (\r\n                            <div className={classes.body}>\r\n                                <div style={{ \"--col\": (response.status === 'success' ? 127 : 0) }} className={classes.response}>\r\n                                    {response.msg &&\r\n                                        <div className={classes.resTextHead}>\r\n                                            <div className={classes.resHead}>Msg: </div>\r\n                                            <div>{response.msg}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {response.stdout &&\r\n                                        <div className={classes.resTextHead}>\r\n                                            <div className={classes.resHead}>STDOUT: </div>\r\n                                            <div>{response.stdout}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {response.stderr &&\r\n                                        <div className={classes.resTextHead}>\r\n                                            <div className={classes.resHead}>STDERR: </div>\r\n                                            <div>{response.stderr}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {response.error &&\r\n                                        <div className={classes.resTextHead}>\r\n                                            <div className={classes.resHead}>Error: </div>\r\n                                            <div>{JSON.stringify(response.error)}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {response.serverError &&\r\n                                        <div className={classes.resTextHead}>\r\n                                            <div className={classes.resHead}>ServerError: </div>\r\n                                            <div>{response.serverError.toString()}</div>\r\n                                        </div>\r\n                                    }\r\n                                    {response.status === 'pending' &&\r\n                                        <div style={{ marginTop: '2rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                                            <LoadingSpinner />\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div aria-hidden ref={endRef}></div>\r\n                </div>\r\n            )}\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nconst useFetchProblems = id => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(undefined);\r\n    const [question, setQuestion] = useState(undefined);\r\n\r\n    /** @type {Object.<string, Array>} */\r\n    const problems = useSelector(state => state.questions);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        setError(undefined);\r\n        setQuestion(undefined);\r\n\r\n        const matchProblem = problems.questions.find(value => value._id === id);\r\n        if (matchProblem) setQuestion(matchProblem);\r\n        else setError(`No such problem found with id: ${id}`);\r\n\r\n        setLoading(false);\r\n    }, [id, problems.questions]);\r\n\r\n    return { loading, error, question };\r\n}\r\n\r\n// const useFetchProblems = id => {\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState(undefined);\r\n//     const [question, setQuestion] = useState(undefined);\r\n\r\n//     useEffect(() => {\r\n//         const controller = new AbortController();\r\n//         const signal = controller.signal;\r\n\r\n//         setLoading(true);\r\n//         setError(undefined);\r\n//         setQuestion(undefined);\r\n\r\n//         fetch(`${SERVER_LINK}/api/explore/problems/${id}`,\r\n//             {\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 method: 'GET',\r\n//                 signal,\r\n//             })\r\n//             .then(async res => {\r\n//                 if (res.ok) return res.json()\r\n//                 const json = await res.json();\r\n//                 return await Promise.reject(json);\r\n//             })\r\n//             .then(res => {\r\n//                 setQuestion(res);\r\n//                 setLoading(false)\r\n//             })\r\n//             .catch(err => {\r\n//                 if (err.name === \"AbortError\") {\r\n//                     console.log(\"Fetch Cancelled !\");\r\n//                 } else {\r\n//                     setError(err);\r\n//                     setLoading(false);\r\n//                 }\r\n//             });\r\n\r\n//         return () => { controller.abort(); }\r\n//     }, [id]);\r\n\r\n//     return { loading, error, question };\r\n// }\r\n\r\nconst useScrollToTop = (dependencies = []) => {\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, dependencies);\r\n}\r\n\r\n\r\nexport default Question;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\n\nexports.default = _default;"],"names":["props","handler","onClick","to","className","classes","color","children","code","setCode","language","fontSize","isReadOnly","isLoading","mode","Fragment","style","position","zIndex","display","alignItems","pointerEvents","translate","fontWeight","marginLeft","placeholder","theme","name","onLoad","onChange","value","parseInt","showPrintMargin","showGutter","readOnly","highlightActiveLine","width","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Input","styled","MuiInput","codeFontSize","setValue","setcodeFontSize","Box","sx","marginRight","Grid","container","spacing","item","TextFields","xs","Slider","event","newValue","min","max","size","target","Number","onBlur","inputProps","step","type","favStyle","resetCode","showCorrectCode","selectedLang","codeEditable","setSelectedLang","correctCodeAvailable","useState","drawerOpen","toggleDrawerOpen","Fab","prev","top","whiteSpace","textTransform","Settings","Drawer","anchor","open","onClose","margin","FormControl","InputLabel","id","Select","labelId","label","height","e","MenuItem","Button","variant","startIcon","RestartAlt","key","initialValue","jsonValue","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","c","cpp","py","js","java","correctCode","bs0","useFetchProblems","loading","setLoading","undefined","error","setError","question","setQuestion","problems","useSelector","state","questions","matchProblem","find","_id","useScrollToTop","dependencies","window","scrollTo","useParams","codeSubmittingState","setcodeSubmittingState","useLocalStorage","defaultCodes","response","setResponse","endRef","useRef","submitHandler","preventDefault","console","log","fetch","SERVER_LINK","headers","method","credentials","body","testcase","quesName","query","json","queryData","ok","intervalID","setInterval","queryId","data","status","clearInterval","output","current","scrollIntoView","behavior","block","msg","serverError","LoadingSpinner","ArrowBack","transform","difficulty","noOfSuccess","noOfSubm","toFixed","description","examples","map","example","index","exn","input","explaination","Options","right","CodeEditorv3","Send","stdout","stderr","toString","marginTop","justifyContent","ref","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}