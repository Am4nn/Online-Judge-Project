{"version":3,"file":"static/js/255.7b7be8d3.chunk.js","mappings":"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","sources":["webpack://client/./src/compenents/Button/Button.module.css?8b47","compenents/Button/Button.js","webpack://client/./src/pages/Codes/Codes.module.css?aca7","pages/Codes/Codes.js","pages/Question/Editor/CodeEditorv3.js","compenents/InputSlider/InputSlider.js","webpack://client/./src/pages/Question/Options/Options.module.css?dacc","pages/Question/Options/Options.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__bCOnh\",\"skyblue\":\"Button_skyblue__rNZpw\",\"blue\":\"Button_blue__uFsUF\",\"green\":\"Button_green__rEjag\",\"yellow\":\"Button_yellow__fkuwo\"};","import React from 'react'\r\nimport classes from './Button.module.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Button = props => {\r\n    const handler = props.onClick ? props.onClick : () => { };\r\n    return (\r\n        <Link onClick={handler} to={props.to} className={`${classes.btn} ${classes[props.color]}`}>\r\n            <span>{props.children}</span>\r\n        </Link >\r\n    )\r\n}\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Codes_container__zKOAw\",\"contain\":\"Codes_contain__-Thim\",\"back\":\"Codes_back__kOV3u\",\"codeSnippet\":\"Codes_codeSnippet__j2PXd\"};","import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport { SERVER_LINK } from '../../dev-server-link';\r\nimport CodeEditorv3 from '../Question/Editor/CodeEditorv3';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ButtonCustom from '../../compenents/Button/Button';\r\n\r\nimport classes from './Codes.module.css';\r\nimport Options from '../Question/Options/Options';\r\n\r\nconst Codes = () => {\r\n    const [response, setResponse] = useState('');\r\n    const [codeFontSize, setcodeFontSize] = useState(15);\r\n\r\n    const [searchParams] = useSearchParams();\r\n\r\n    let filepath = null, language = null;\r\n    if (searchParams.get('filepath') && searchParams.get('language')) {\r\n        filepath = searchParams.get('filepath');\r\n        language = searchParams.get('language');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!filepath) return;\r\n        fetch(\r\n            `${SERVER_LINK}/api/explore/getcode`,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                method: 'POST',\r\n                body: JSON.stringify({ filepath })\r\n            }\r\n        )\r\n            .then(res => res.json())\r\n            .then(data => setResponse(data))\r\n            .catch(error => setResponse({\r\n                error: `server side error, check your network\r\n${error}`\r\n            }))\r\n    }, [filepath])\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            {!filepath && <div className='errorTemplate'><span>Error : </span>You should come to this page by clicking button on leader board / or might be possible that code for this query was never written/saved.</div>}\r\n            {response.error && <div className='errorTemplate'><span>Error : </span>{response.error}</div>}\r\n\r\n            {\r\n                filepath && !response.error && (\r\n                    <div className={classes.container}>\r\n                        <div className={classes.contain}>\r\n                            <div className={classes.back}>\r\n                                <div className={classes.codeSnippet}>\r\n                                    &#60; go back to leaderboard /&#62;\r\n                                </div>\r\n                                <ButtonCustom to='/leaderboard' color='yellow'>\r\n                                    <ArrowBackIcon style={{ marginRight: '0.3em', transform: 'translateX(-12px)', fontSize: '1.2em' }} />\r\n                                    Back\r\n                                </ButtonCustom>\r\n                            </div>\r\n                            <Options\r\n                                favStyle={{\r\n                                    zIndex: '899',\r\n                                    position: 'relative',\r\n                                    left: '33%',\r\n                                    bottom: '1rem'\r\n                                }}\r\n                                codeFontSize={codeFontSize}\r\n                                setcodeFontSize={setcodeFontSize}\r\n                            />\r\n                            <CodeEditorv3\r\n                                code={response.code}\r\n                                setCode={null}\r\n                                language={language}\r\n                                fontSize={codeFontSize}\r\n                                isReadOnly={true}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default Codes;","import React from 'react'\r\n\r\nimport AceEditor from 'react-ace'\r\n\r\nimport \"ace-builds/webpack-resolver\"\r\n\r\nimport 'ace-builds/src-noconflict/mode-javascript'\r\nimport 'ace-builds/src-noconflict/mode-c_cpp'\r\nimport 'ace-builds/src-noconflict/mode-java'\r\nimport 'ace-builds/src-noconflict/mode-python'\r\n\r\nimport 'ace-builds/src-noconflict/theme-monokai'\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\nconst CodeEditorv3 = props => {\r\n\r\n    const { code, setCode, language, fontSize, isReadOnly = false } = props;\r\n\r\n    let mode = 'c_cpp';\r\n    switch (language) {\r\n        case 'cpp':\r\n            mode = 'c_cpp';\r\n            break;\r\n        case 'java':\r\n            mode = 'java';\r\n            break;\r\n        case 'py':\r\n            mode = 'python';\r\n            break;\r\n        case 'js':\r\n            mode = 'javascript';\r\n            break;\r\n        default:\r\n            mode = 'c_cpp';\r\n    }\r\n\r\n    return (\r\n        <AceEditor\r\n            placeholder=\"Enter your code here\"\r\n            mode={mode}\r\n            theme=\"monokai\"\r\n            name=\"editorv3\"\r\n            onLoad={() => {\r\n                // console.log('loaded')\r\n            }}\r\n            onChange={value => setCode(value)}\r\n            fontSize={parseInt(fontSize)}\r\n            showPrintMargin={false}\r\n            showGutter={true}\r\n            readOnly={isReadOnly}\r\n            highlightActiveLine={true}\r\n            value={code}\r\n            width='100%'\r\n            setOptions={{\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: false,\r\n                showLineNumbers: true,\r\n                tabSize: 4,\r\n            }}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default CodeEditorv3;","import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Slider from '@mui/material/Slider';\r\nimport MuiInput from '@mui/material/Input';\r\nimport VolumeUp from '@mui/icons-material/VolumeUp';\r\n\r\nimport TextFields from '@mui/icons-material/TextFields';\r\n\r\nconst Input = styled(MuiInput)`\r\n  width: 42px;\r\n`;\r\n\r\nconst InputSlider = ({ codeFontSize: value, setcodeFontSize: setValue }) => {\r\n\r\n    const maxVal = 50, minVal = 5;\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (value < minVal) {\r\n            setValue(minVal);\r\n        } else if (value > maxVal) {\r\n            setValue(maxVal);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ width: 250, marginRight: '1rem' }}>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n                <Grid item>\r\n                    <TextFields />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={handleSliderChange}\r\n                        aria-labelledby=\"input-slider\"\r\n                        min={minVal}\r\n                        max={maxVal}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Input\r\n                        value={value}\r\n                        size=\"small\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleBlur}\r\n                        inputProps={{\r\n                            step: 10,\r\n                            min: minVal,\r\n                            max: maxVal,\r\n                            type: 'number',\r\n                            'aria-labelledby': 'input-slider',\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default InputSlider;","// extracted by mini-css-extract-plugin\nexport default {\"optionHeading\":\"Options_optionHeading__fdusp\",\"optionSnippet\":\"Options_optionSnippet__N0l+l\",\"fontSnippet\":\"Options_fontSnippet__fL-Vn\",\"changeFont\":\"Options_changeFont__gkV59\",\"resetCode\":\"Options_resetCode__dGw-D\"};","import Settings from '@mui/icons-material/Settings'\r\nimport { Button, Drawer, Fab, FormControl, InputLabel, MenuItem, Select } from '@mui/material'\r\nimport React, { Fragment, useState } from 'react'\r\nimport InputSlider from '../../../compenents/InputSlider/InputSlider'\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\n\r\nimport classes from './Options.module.css';\r\n\r\nconst Options = props => {\r\n\r\n    const {\r\n        favStyle,\r\n        resetCode,\r\n        codeFontSize,\r\n        selectedLang,\r\n        codeEditable,\r\n        setcodeFontSize,\r\n        setSelectedLang\r\n    } = props;\r\n\r\n    const [drawerOpen, toggleDrawerOpen] = useState(false);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Fab style={favStyle} onClick={() => toggleDrawerOpen(prev => !prev)} color=\"secondary\" aria-label=\"add\">\r\n                <div className={classes.optionSnippet}\r\n                    style={{\r\n                        top: '-1.5rem',\r\n                        whiteSpace: 'nowrap',\r\n                        textTransform: 'lowercase'\r\n                    }}\r\n                >\r\n                    &#60; change lang, font size, ... /&#62;\r\n                </div>\r\n                <Settings />\r\n            </Fab>\r\n            <Drawer\r\n                anchor='right'\r\n                open={drawerOpen}\r\n                onClose={() => toggleDrawerOpen(prev => !prev)}\r\n            >\r\n                <div style={{ width: '15rem', margin: '1rem' }}>\r\n                    <h1 className={classes.optionHeading} >Options</h1>\r\n\r\n\r\n                    <div className={classes.fontSnippet}>\r\n                        &#60; Font Size /&#62;\r\n                    </div>\r\n                    <div className={classes.changeFont}>\r\n                        <InputSlider codeFontSize={codeFontSize} setcodeFontSize={setcodeFontSize} />\r\n                    </div>\r\n                    {codeEditable &&\r\n                        <Fragment>\r\n                            <div className={classes.changeLang}>\r\n                                <FormControl>\r\n                                    <InputLabel id=\"changeLang-select-label\">Language</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"changeLang-select-label\"\r\n                                        id=\"changeLang-select\"\r\n                                        value={selectedLang}\r\n                                        label=\"Language\"\r\n                                        style={{ width: '8em', height: '2.8em' }}\r\n                                        onChange={e => setSelectedLang(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={'cpp'}>Cpp</MenuItem>\r\n                                        <MenuItem value={'py'}>Python</MenuItem>\r\n                                        {/* <MenuItem value={'java'}>JAVA</MenuItem> */}\r\n                                        {/* <MenuItem value={'js'}>JS</MenuItem> */}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n\r\n                            <div className={classes.resetCode}>\r\n                                <Button color=\"error\" onClick={resetCode} variant='contained' startIcon={\r\n                                    <RestartAltIcon fontSize='large' style={{ marginRight: '0.5em', fontSize: '2em' }} />\r\n                                } style={{ textTransform: 'capitalize' }}>\r\n                                    ResetCode\r\n                                </Button>\r\n                            </div>\r\n                        </Fragment>\r\n                    }\r\n                </div>\r\n            </Drawer>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Options"],"names":["props","handler","onClick","to","className","classes","color","children","useState","response","setResponse","codeFontSize","setcodeFontSize","useSearchParams","searchParams","filepath","language","get","useEffect","fetch","SERVER_LINK","headers","method","body","JSON","stringify","then","res","json","data","catch","error","Fragment","Button","ArrowBack","style","marginRight","transform","fontSize","Options","favStyle","zIndex","position","left","bottom","CodeEditorv3","code","setCode","isReadOnly","mode","placeholder","theme","name","onLoad","onChange","value","parseInt","showPrintMargin","showGutter","readOnly","highlightActiveLine","width","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Input","styled","MuiInput","setValue","Box","sx","Grid","container","spacing","alignItems","item","TextFields","xs","Slider","event","newValue","min","max","size","target","Number","onBlur","inputProps","step","type","resetCode","selectedLang","codeEditable","setSelectedLang","drawerOpen","toggleDrawerOpen","Fab","prev","top","whiteSpace","textTransform","Settings","Drawer","anchor","open","onClose","margin","FormControl","InputLabel","id","Select","labelId","label","height","e","MenuItem","variant","startIcon","RestartAlt"],"sourceRoot":""}